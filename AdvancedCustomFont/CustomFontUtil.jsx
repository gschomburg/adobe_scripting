var path = ((File($.fileName)).path); // this is the path of the scriptvar basePath = "~/Documents/Personal/adobe_scripts/AdvancedCustomFont"var fileName = "/CustomFont.jsx"var libfile = File(basePath + fileName);if(libfile.exists){	$.evalFile(libfile);}else{	alert("file not found: "+basePath + fileName);}var myWin;var textEntryBox;var outputString="Hello World";var fontFile=null;var fontData=null;var fontDataFile=null;var fileNameText;var lineHeightText;var letterSpacingText;var monospacedToggle;var fontSpacingBaseText;function buildUIPanel(_thisObj){    var win = new Window('dialog', 'Utils');	win.orientation = "row";	win.alignChildren = ['left', 'top'];	win.margins=8;	//Load Font	var groupOne = win.add("panel", undefined, "Font");	groupOne.alignChildren = ['left', 'top'];	var loadButton = groupOne.add("button", undefined, "Load Font");	loadButton.onClick = selectFontFile;	//text field with the file name in it	fileNameText = groupOne.add("statictext", undefined, "load a font file...");	fileNameText.minimumSize.width = 200;	if(fontFile!=null){		fileNameText.text = fontFile.path + "/" + fontFile.name;	}	//Properties	var propertiesPanel = win.add("panel", undefined, "Properties", {borderStyle:"none"});	propertiesPanel.alignChildren = ['fill','fill'];	propertiesPanel.add("statictext", undefined, "Letter Spacing");	letterSpacingText = propertiesPanel.add("edittext", undefined, 45);	propertiesPanel.add("statictext", undefined, "Line Height");	lineHeightText = propertiesPanel.add("edittext", undefined, 90);	monospacedToggleButton = propertiesPanel.add ("checkbox", undefined, "Monospace");	monospacedToggleButton.onClick = toggleMonospaced;	monospacedToggleButton.value = false;	propertiesPanel.add("statictext", undefined, "Letter Spacing Unit");	fontSpacingBaseText = propertiesPanel.add("edittext", undefined, 6);	fontSpacingBaseText.enabled = !monospacedToggleButton.value;	//Content	var groupTwo = win.add("panel", undefined, "Content");	groupTwo.alignChildren = ['left', 'top'];	textEntryBox = groupTwo.add("edittext", undefined, "Enter Text Here...", {multiline:true, scrollable:true});	textEntryBox.size = [300, 200];    textEntryBox.onChange = textChanged;    	var buildButton = groupTwo.add("button", undefined, "Build");	buildButton.onClick = buildType;        var closeButton = groupTwo.add("button", undefined, "Cancel");    closeButton.onClick = closeWindow;	win.layout.layout(true);		return win;}function textChanged(){    outputString = textEntryBox.text;}function toggleMonospaced(){	fontSpacingBaseText.enabled = !monospacedToggleButton.value;}function closeWindow(){    myWin.close(); }function buildType(){	//get props for generation	var props = {letterSpacing:letterSpacingText.text, lineHeight:lineHeightText.text, monospace:monospacedToggleButton.value, fontSpacingBase: fontSpacingBaseText.text}	var success = generateText(outputString, props);	if(success){		closeWindow();	}}myWin = buildUIPanel(this);myWin.show();/*TODOwrapping/width of text box Add to UIxxxxxxxx - monospace check boxxxxxxxxx - add letterspacing and linespacing to dialogxxxxxxxx - add font file selection /loadxxxxxxxx - redo sutton*/function selectFontFile(){	fontFile = File.openDialog("Choose a custom font file (svg or ai) Or a font data file (.js)","",false);	if(isFontDataFile(fontFile)){		//fontDataFile = fontFile;		var dataFile = File(fontFile.path + "/" + fontFile.name);		// $.writeln("parsing:" + fontFile.path + "/" + fontFile.name)				fontData = parseFontData(dataFile);				if(fontData != null){			fontFile = new File(fontFile.path + "/" + fontData.file);			//populate font ui fields			updateUIFieldsFromFontData();		}else{			alert("fontData not found in:" + fontFile.name);		}	}	fileNameText.text = fontFile.path + "/" + fontFile.name;	}function updateUIFieldsFromFontData(){	letterSpacingText.text  = fontData.baseLetterSpacing;	lineHeightText.text  = fontData.baseLineHeight;	monospacedToggleButton.value = fontData.monospaced;	fontSpacingBaseText.text = fontData.baseLetterSpaceUnit;	fontSpacingBaseText.enabled = !monospacedToggleButton.value;}function isFontDataFile(_file){	//check extension?	if(_file.name.indexOf(".js") == _file.name.length - 3){		$.writeln("font data file");		return true;	}	return false;}function parseFontData(_file){		if(_file.exists){		$.evalFile(_file, 3000);        return data;	}else{		alert("file not found: "+ _file.name);		return null;	}}