$.writeln("loaded text functions");//var letters;var fontDocument;var doc;/*TODOSget data format for font and spacingget data file associated with each font file?font file for Suttonxxxxxxxx - do nassauxxxxxxxx - nassau lower case and extended characters*/function loadFontFile(){    if(fontFile == null){        alert("Please Load Font File");        return false;    }    doc = app.activeDocument;    try{        fontDocument = app.open(fontFile);    }catch(e){         alert("Load Failed: " + fontFile.path + "/" + fontFile.name + "\n" + e.toString());        return false;    }    return true;}function generateText(_text, _props){   // alert("generateText");    var outputText = _text;    var letterWidth = 30;    var letterHeight = 60;    var letterSpacing = letterWidth + 15;    var lineHeight = letterHeight + 30;    var monospace = true;    var letterKerning = 0;    var wrapWidth = 2500; //width to wrap the text.. won't wrap words, just characters    var fontSpacingBase = 6;    if(_props!=null){        if(_props.letterSpacing) letterSpacing = parseFloat(_props.letterSpacing);        if(_props.lineHeight) lineHeight = parseFloat(_props.lineHeight);        if(_props.monospace==false){            monospace = _props.monospace;            fontSpacingBase = parseFloat(_props.fontSpacingBase);        }    }    if(loadFontFile() == false){        return false;    }        app.activeDocument = doc;        var output = doc.activeLayer.groupItems.add();    output.name = "VectorText";    output.move( doc, ElementPlacement.PLACEATEND );    var xPos=0;    var yPos=0;    var lastChar="";    for(var i = 0; i < outputText.length; i++) {        var t = outputText[i];        if(t == "\n"){            yPos++;            xPos = 0;        }else if(t==" "){            if(monospace){                xPos++;            }else{                xPos += fontSpacingBase*4;             }            //TODO implement real word wrap            //word wrapping            if(xPos>wrapWidth){                yPos++;                xPos = 0;            }        }else if(t=="\t"){            if(monospace){                xPos+=4;            }else{                xPos += fontSpacingBase*16;             }            //TODO implement real word wrap            //word wrapping            if(xPos>wrapWidth){                yPos++;                xPos = 0;            }        }else{            //TODO implement real word wrap above             if(xPos>wrapWidth*1.5){                yPos++;                xPos = 0;            }            letter = getDataForChar(t);            if(letter != null && letter.layer!=null){                var offset = letter.layer.position;                var dup = letter.layer.duplicate(doc, ElementPlacement.PLACEATEND);                dup.move(output, ElementPlacement.PLACEATEND);                if(monospace){                    dup.position = [(xPos * letterSpacing) + offset[0], (-yPos * lineHeight) + offset[1]];                    xPos ++;                }else{                    var letterWidth = dup.width + offset[0];                    var sideBearing = getCharSideBearing(t);                    xPos += sideBearing[0] * fontSpacingBase;                                        var pos = [ xPos, (-yPos * lineHeight) + offset[1] ];                    dup.position = pos;                    xPos += letterWidth + (sideBearing[1] * fontSpacingBase);                }                dup.hidden = false;            }                    }        lastChar = t; //keep track of the last character for kerning pairs    }    //position in the top left corner of the doc    //Y value is reversed for some reason?    output.position = [10, -10];    return true;}function getCharSideBearing(_char){    //return side bearing values    var fontLetterSpacing = fontData.charLetterSpacing;    if(fontLetterSpacing[_char] && fontLetterSpacing[_char].sidebearing){        return fontLetterSpacing[_char].sidebearing;    }    $.writeln("No spacing info found: " + _char);    return [0,0];}function getDataForChar( _char ){    var data = charData[_char];    if(data == null) return;    if(data.layer == null){        //store the layer in the data obj if it isn't already        data.layer = findLetterLayer(data);    }        return data;}function findLetterLayer(_data){    var layers = fontDocument.layers;        //walk the layers    for(var i =0; i<layers.length; i++){        var letterLayer = findLayerByName("char-"+_data.name, layers[i], false);        if(letterLayer!=null) return letterLayer;    }    $.writeln("findLetterLayer layer not found:" + _data.name);    return null;}function findLayerByName(_name, _inLayer, _recursive){    //check in layer    if(_inLayer.name == _name){        //group all the page items in tha layer        if(_inLayer.pageItems.length>1){            groupAllPageItemsInLayer(_inLayer);        }        return _inLayer.pageItems[0];    }        //check groups in the layer    var layerGroup = findGroupByName(_name, _inLayer);    if(layerGroup != null) return layerGroup;        //lastly, check one layer in    if(_recursive == true){        var layers = _inLayer.layers;        for(var i =0; i<layers.length; i++){            var letterLayer = findLayerByName(_data.name, layers[i]);            if(letterLayer!=null) return letterLayer;        }        }    return null;}function groupAllPageItemsInLayer(_inLayer){    _inLayer.visible=true;       var newGroup = _inLayer.groupItems.add();   // var layerPageItems = _inLayer.pageItems;    newGroup.name = "group-"+_inLayer.name;    var loopCount = 0; //loo count prevents this from going forever if there's some sort of error    while(_inLayer.pageItems.length>1 && loopCount<10){        _inLayer.pageItems[_inLayer.pageItems.length-1].move(newGroup, ElementPlacement.PLACEATEND);        loopCount++;    }    _inLayer.visible=false;}function findGroupByName(_name, _inLayer){   // var searchLayer    for(var n=0; n<_inLayer.groupItems.length; n++){        var groupName = _inLayer.groupItems[n].name;        if(groupName == _name){            return _inLayer.groupItems[n];        }    }    return null;}var charData = {    "a":{name:"a", layer:null},    "b":{name:"b", layer:null},    "c":{name:"c", layer:null},    "d":{name:"d", layer:null},    "e":{name:"e", layer:null},    "f":{name:"f", layer:null},    "g":{name:"g", layer:null},    "h":{name:"h", layer:null},    "i":{name:"i", layer:null},    "j":{name:"j", layer:null},    "k":{name:"k", layer:null},    "l":{name:"l", layer:null},    "m":{name:"m", layer:null},    "n":{name:"n", layer:null},    "o":{name:"o", layer:null},    "p":{name:"p", layer:null},    "q":{name:"q", layer:null},    "r":{name:"r", layer:null},    "s":{name:"s", layer:null},    "t":{name:"t", layer:null},    "u":{name:"u", layer:null},    "v":{name:"v", layer:null},    "w":{name:"w", layer:null},    "x":{name:"x", layer:null},    "y":{name:"y", layer:null},    "z":{name:"z", layer:null},    "A":{name:"A", layer:null},    "B":{name:"B", layer:null},    "C":{name:"C", layer:null},    "D":{name:"D", layer:null},    "E":{name:"E", layer:null},    "F":{name:"F", layer:null},    "G":{name:"G", layer:null},    "H":{name:"H", layer:null},    "I":{name:"I", layer:null},    "J":{name:"J", layer:null},    "K":{name:"K", layer:null},    "L":{name:"L", layer:null},    "M":{name:"M", layer:null},    "N":{name:"N", layer:null},    "O":{name:"O", layer:null},    "P":{name:"P", layer:null},    "Q":{name:"Q", layer:null},    "R":{name:"R", layer:null},    "S":{name:"S", layer:null},    "T":{name:"T", layer:null},    "U":{name:"U", layer:null},    "V":{name:"V", layer:null},    "W":{name:"W", layer:null},    "X":{name:"X", layer:null},    "Y":{name:"Y", layer:null},    "Z":{name:"Z", layer:null},    "0":{name:"0", layer:null},    "1":{name:"1", layer:null},    "2":{name:"2", layer:null},    "3":{name:"3", layer:null},    "4":{name:"4", layer:null},    "5":{name:"5", layer:null},    "6":{name:"6", layer:null},    "7":{name:"7", layer:null},    "8":{name:"8", layer:null},    "9":{name:"9", layer:null},    "-":{name:"dash", layer:null},    "—":{name:"dash", layer:null},    "_":{name:"underscore", layer:null},    '"':{name:"doublequote", layer:null},    "“":{name:"doublequote", layer:null},    "”":{name:"doublequote", layer:null},    "'":{name:"quote", layer:null},    "’":{name:"quote", layer:null},    ",":{name:"comma", layer:null},    "~":{name:"tilde", layer:null},    ":":{name:"colon", layer:null},    ";":{name:"semicolon", layer:null},    "?":{name:"question", layer:null},    ".":{name:"period", layer:null},    "!":{name:"exclamation", layer:null},    "&":{name:"ampersand", layer:null},    "#":{name:"pound", layer:null},    "|":{name:"bar", layer:null},    "\\":{name:"backslash", layer:null},    "/":{name:"slash", layer:null},    ")":{name:"parenthright", layer:null},    "(":{name:"parenthleft", layer:null},    "%":{name:"percent", layer:null},    ">":{name:"greaterthan", layer:null},    "<":{name:"lessthan", layer:null},    "}":{name:"curlyright", layer:null},    "{":{name:"curlyleft", layer:null},    "]":{name:"bracketright", layer:null},    "[":{name:"bracketleft", layer:null},    "^":{name:"caret", layer:null},    "@":{name:"at", layer:null},    "$":{name:"dollar", layer:null},    "=":{name:"equal", layer:null},    "+":{name:"plus", layer:null},    "*":{name:"asterix", layer:null}}